!function(e){"use strict";if(e(window).load(function(){if(e(".navbar.navbar-fixed-top").length>0){var t=function(){scrollBy(0,-e(".navbar").height()-5)};location.hash&&setTimeout(t,1)}}),function(e,t,n,o,a,i,r){e.GoogleAnalyticsObject=a,e[a]=e[a]||function(){(e[a].q=e[a].q||[]).push(arguments)},e[a].l=1*new Date,i=t.createElement(n),r=t.getElementsByTagName(n)[0],i.async=1,i.src=o,r.parentNode.insertBefore(i,r)}(window,document,"script","//www.google-analytics.com/analytics.js","ga"),ga("create","UA-71610557-4","auto"),ga("send","pageview"),"-ms-user-select"in document.documentElement.style&&navigator.userAgent.match(/IEMobile/)){var t=document.createElement("style");t.appendChild(document.createTextNode("@-ms-viewport{width:auto!important}")),document.getElementsByTagName("head")[0].appendChild(t)}var n=function(t,n,o){e.get(t).done(function(e){try{o=marked(e)}catch(t){console.log(t)}}).fail(function(e){console.log(e)}).always(function(){n&&(n.innerHTML+=o)})},o=function(e,t,n){function o(e){return(a?/^\d+[A-Za-z]*$/:/^\d+$/).test(e)}var a=n&&n.lexicographical,i=n&&n.zeroExtend,r=e.split("."),l=t.split(".");if(!r.every(o)||!l.every(o))return NaN;if(i){for(;r.length<l.length;)r.push("0");for(;l.length<r.length;)l.push("0")}a||(r=r.map(Number),l=l.map(Number));for(var c=0;c<r.length;++c){if(l.length===c)return 1;if(r[c]!==l[c])return r[c]>l[c]?1:-1}return r.length!==l.length?-1:0},a=function(e){return e.find("version").text()},i=function(e){return e.substr(0,e.lastIndexOf("."))},r="Unknown",l=function(t){try{var n=void 0;try{n=e.type(t)===e.type(new Object)?(new XMLSerializer).serializeToString(t):e.parseXML(t)}catch(l){console.log(l)}if(!n)return;var c=e(n).find("release");if(c&&c.length>0?c.each(function(t,n){if(!n.nextElementSibling)return void("Unknown"===r&&(r=i(a(e(n)))));var l=a(e(n)),c=a(e(n.nextElementSibling));r=i(l),o(l,c,{lexicographical:!0})<0&&(r=i(c))}):r=i(a(e(n))),!isMobile.any){var s=e(n).find("autopatchurl").text();e("#installer")[0]&&(e("#installer")[0].href=s),e("#binaries")[0]&&(e("#binaries")[0].href=s.replace("install","binaries").replace("exe","zip"))}}catch(u){console.log(u)}e("#version")&&e("#version").text(r)};e(function(){e(isMobile.any?".onlyDesktop":".onlyMobile").hide(),n("https://raw.githubusercontent.com/evemondevteam/evemon/gh-pages/mds/latestNews.md",e(".latest-news")[0],"Unable to get the latest news."),n("https://raw.githubusercontent.com/evemondevteam/evemon/gh-pages/mds/changeLog.md",e(".change-log")[0],"Unable to get the change logs."),function(){e.get("https://bitbucket.org/EVEMonDevTeam/evemon/wiki/updates/patch-emergency.xml").done(l).fail(function(t){console.log(t),e.get("https://bitbucket.org/EVEMonDevTeam/evemon/wiki/updates/patch.xml").done(l).fail(function(t){e("#version")&&e("#version").text(r),console.log(t)})})}(),function(){var t=e("#year")&&new Date(e("#year").text()).getUTCFullYear(),n=(new Date).getUTCFullYear();t&&n>t&&e("#year").text(t+" - "+n)}()})}(jQuery);
//# sourceMappingURL=data:application/json;base64,
